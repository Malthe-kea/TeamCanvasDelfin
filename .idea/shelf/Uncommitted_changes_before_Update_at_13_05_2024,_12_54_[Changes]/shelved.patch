Index: src/domain_model/Processors/SuperUserProcessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package domain_model.Processors;\n\nimport database.Database;\nimport database.DBController;\nimport domain_model.*;\nimport database.userDB.UserDB;\nimport user_domain.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.time.LocalDate;\nimport java.time.Period;\n\npublic class SuperUserProcessor implements Processor {\n    private Scanner userInput;\n    DBController dbController;\n    private ArrayList<User> userListArr;\n    boolean programRunning = true;\n\n    public SuperUserProcessor(DBController dbController) {\n        this.dbController = dbController;\n        userInput = new Scanner(System.in);\n    }\n\n    @Override\n    public UIDisplayInfo getMainMenu() {\n\n\n        ArrayList<String> options = new ArrayList<>(List.of(\n                \"Tilføj medlem\",\n                \"Tilføj træner\",\n                \"Tilføj konkurrence-medlem\",\n                \"Tilføj kasserer\",\n                \"Ændre medlemsoplysninger\",\n                \"Slet medlem\",\n                \"Se brugeroversigt\"));\n\n\n        return new UIDisplayInfo(\"SuperUser Menu\",\"Vælg en af følgende muligheder\", DisplayType.MENU ,options);\n\n\n    }\n\n    @Override\n    public UIDisplayInfo processMainMenuOption(int option) {\n        return null;\n    }\n\n    public ArrayList createSuperUser() {\n        ArrayList<SuperUser> superUser = new ArrayList<>();\n        superUser.add(new SuperUser(1, \"flemming\", \"Rasmussen\"));\n        return superUser;\n    }\n\n    public ArrayList<String> getUserList() {\n        ArrayList<String> userList = new ArrayList<>();\n        ArrayList<User> allUsers = dbController.getListOfAllUsers();\n        for (User u : allUsers) {\n            UserInstance userInstance = DelfinUtil.checkUserInstance(u);\n            switch (userInstance) {\n                case MEMBER -> {\n                    userList.add(((Member)u).toString());\n                }\n                case COMPETITIVE -> {\n                    userList.add(((CompetitiveMember)u).toString());\n                }\n                case TRAINER -> {\n                    userList.add(((Trainer)u).toString());\n                }\n                case SUPER, TREASURER -> {\n                    userList.add(u.toString());\n                }\n            }\n        }\n        return userList;\n    }\n\n    public void CreateandAddMembertoDB(String password, String firstNames, String lastNames, boolean activePassiveInput, String birthDate, boolean isCompetitiveInput, boolean isArrearsInput) {\n\n        Boolean isActiveMember = activePassiveInput;\n        Boolean isCompetitive = isCompetitiveInput;\n        Boolean isArrears = isArrearsInput;\n        //LocalDate dob = LocalDate.parse(birthDate);\n\n        //TODO new member tager imod dateOfBirth som en string, det skal være LocalDate.\n        User memberToAdd = new Member(dbController.getIDForNewUser(), firstNames, lastNames, isActiveMember, isCompetitive, birthDate, isArrears);\n        dbController.addUserToDB(memberToAdd, password);\n    }\n\n    public void CreateandAddTrainertoDB(String password, String firstNames, String lastNames, boolean isSeniorTrainer) {\n\n        User trainerToAdd = new Trainer(dbController.getIDForNewUser(), firstNames, lastNames, isSeniorTrainer);\n        dbController.addUserToDB(trainerToAdd, password);\n    }\n\n    public void CreateandAddCompetitiveMembertoDB(String password, String firstNames, String lastName, boolean isActiveMemberInput, boolean isCompetitiveInput, String birthDate, boolean isArrearsInput) {\n\n        Boolean isActiveMember = isActiveMemberInput;\n        Boolean isCompetitive = isCompetitiveInput;\n        Boolean isArrears = isArrearsInput;\n        //TODO new competitiveMember tager imod dateOfBirth som en string, det skal være LocalDate.\n//        LocalDate dob = LocalDate.parse(birthDate);\n\n//Her skal laves en metode, der tager seneste userID fra DB'en og incrementer den med 1.\n        //testDB.add(new CompetitiveMember(3, \"Susse\", \"Sonnegaard\", true, true, calculateAge(dob), false));\n        User competitiveMemberToAdd = new CompetitiveMember(dbController.getIDForNewUser(), firstNames, lastName, isActiveMember, isCompetitive, birthDate, isArrears);\n        dbController.addUserToDB(competitiveMemberToAdd, password);\n    }\n\n    public void CreateAndAddTreasurertoDB(String password, String firstNames, String lastNames) {\n\n        User treasurerToAdd = new Treasurer(dbController.getIDForNewUser(), firstNames, lastNames);\n        dbController.addUserToDB(treasurerToAdd, password);\n    }\n\n    //TODO fiks den her metode, så den ikke returnerer noget.\n    public void editUserFromDB(int idToEdit, String firstName) {\n        UserDB db = new UserDB();\n        User userToEdit = db.getUserFromID(idToEdit);\n\n        if (userToEdit.getFirstName().equalsIgnoreCase(firstName)) {\n\n            String command = userInput.nextLine().toLowerCase();\n            String commandPrompt = userInput.nextLine().toLowerCase();\n            switch (DelfinUtil.checkUserInstance(userToEdit)) {\n\n                case SUPER, TREASURER -> {\n                    print(\"\"\"\n                            1. Rediger fornavn\n                            2. Rediger efternavn\n                            \"\"\");\n                    commandPrompt = userInput.nextLine().toLowerCase();\n                    userToEdit.setFirstName(commandPrompt);\n                }\n                case MEMBER, COMPETITIVE -> {\n                    print(\"\"\"\n                            1. Rediger fornavn\n                                 2. Rediger efternavn\n                                     3. Rediger aktivitetsstatus\n                            4. Konkurrence/Motionist\n                            5. Restancestatus.\n                            \"\"\");\n                    if (DelfinUtil.checkUserInstance(userToEdit) == UserInstance.COMPETITIVE) {\n                        //TODO når Style.class er oprettet kan vi tilføje discipliner herunder.\n                        print(\"\"\"\n                                6. \n                                \"\"\");\n                    }\n                    commandPrompt = userInput.nextLine().toLowerCase();\n                    userToEdit.setLastName(commandPrompt);\n                }\n                case TRAINER -> {\n                    commandPrompt = userInput.nextLine().toLowerCase();\n                    Trainer trainer = (Trainer) userToEdit;\n\n                    print(\"\"\"\n                            1. Rediger fornavn\n                            2. Rediger efternavn\n                            3. Senior/Junior\n                            \"\"\");\n                    //TODO lav switchcase, der passer til menuen.\n\n                    boolean seniorOrNot = (commandPrompt.equalsIgnoreCase(\"senior\")) ? true : false;\n                    trainer.setSeniorTrainer(seniorOrNot);\n\n                }\n                default -> {\n                    print(\"invalid input\");\n                }\n\n            }\n            db.editUserInDB(userToEdit);\n        }\n\n    }\n\n    public void deleteUserFromDB(int indexInList) {\n\n        ArrayList<User> allUsers = dbController.getListOfAllUsers();\n        User userToDelete = allUsers.get(indexInList);\n        dbController.removeUserFromDB(userToDelete);\n\n    }\n\n    public String getUserInfo(int indexToEdit) {\n        ArrayList<User> allUsers = dbController.getListOfAllUsers();\n        User userForInfo = allUsers.get(indexToEdit);\n\n        switch (DelfinUtil.checkUserInstance(userForInfo)) {\n            case MEMBER -> {\n                return ((Member)userForInfo).toString();\n            }\n            case COMPETITIVE -> {\n                return ((CompetitiveMember)userForInfo).toString();\n            }\n            case TRAINER -> {\n                return ((Trainer)userForInfo).toString();\n            }\n            case SUPER, TREASURER -> {\n                return userForInfo.toString();\n            }\n        }\n        return \"null\";\n    }\n\n\n    public Database getUserFromDB(int idToEdit) {\n        //TODO send DB return\n        String command = \"1\";\n        print(\"\"\"\n                Hvilket brugeroversigt vil du gerne se?\n                1. Crawl\n                2. Rygcrawl\n                3. Brystsvømning\n                4. Butterfly\n                5. Aktive/Passive medlemmer\n                6. Juniorer/Seniorer\n                \"\"\");\n        while (programRunning)\n            switch (command) {\n                case \"1\" -> {\n                    print(\"Get XYZ-database\");\n                }\n                case \"2\" -> {\n                    print(\"Get XYZ-database\");\n                }\n                case \"3\" -> {\n                    print(\"Get XYZ-database\");\n                }\n                case \"4\" -> {\n                    print(\"Get XYZ-database\");\n                }\n                case \"5\" -> {\n                    print(\"Get XYZ-database\");\n                }\n                case \"6\" -> {\n                    print(\"Get XYZ-database\");\n                }\n                default -> {\n                    print(\"invalid input\");\n                }\n            }\n        return null;\n    }\n\n\n    public static int calculateAge(LocalDate dob) {\n        LocalDate curDate = LocalDate.now();\n\n        if ((dob != null) && (curDate != null)) {\n            return Period.between(dob, curDate).getYears();\n        } else {\n            return 0;\n        }\n    }\n\n    private void print(String s) {\n        UserInterfaceEsra.print(s);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/domain_model/Processors/SuperUserProcessor.java b/src/domain_model/Processors/SuperUserProcessor.java
--- a/src/domain_model/Processors/SuperUserProcessor.java	(revision 407b6d7d54e92f9ed337d12895cae9e5e5c86f17)
+++ b/src/domain_model/Processors/SuperUserProcessor.java	(date 1715589809660)
@@ -113,68 +113,8 @@
         User treasurerToAdd = new Treasurer(dbController.getIDForNewUser(), firstNames, lastNames);
         dbController.addUserToDB(treasurerToAdd, password);
     }
-
-    //TODO fiks den her metode, så den ikke returnerer noget.
-    public void editUserFromDB(int idToEdit, String firstName) {
-        UserDB db = new UserDB();
-        User userToEdit = db.getUserFromID(idToEdit);
+    
 
-        if (userToEdit.getFirstName().equalsIgnoreCase(firstName)) {
-
-            String command = userInput.nextLine().toLowerCase();
-            String commandPrompt = userInput.nextLine().toLowerCase();
-            switch (DelfinUtil.checkUserInstance(userToEdit)) {
-
-                case SUPER, TREASURER -> {
-                    print("""
-                            1. Rediger fornavn
-                            2. Rediger efternavn
-                            """);
-                    commandPrompt = userInput.nextLine().toLowerCase();
-                    userToEdit.setFirstName(commandPrompt);
-                }
-                case MEMBER, COMPETITIVE -> {
-                    print("""
-                            1. Rediger fornavn
-                                 2. Rediger efternavn
-                                     3. Rediger aktivitetsstatus
-                            4. Konkurrence/Motionist
-                            5. Restancestatus.
-                            """);
-                    if (DelfinUtil.checkUserInstance(userToEdit) == UserInstance.COMPETITIVE) {
-                        //TODO når Style.class er oprettet kan vi tilføje discipliner herunder.
-                        print("""
-                                6. 
-                                """);
-                    }
-                    commandPrompt = userInput.nextLine().toLowerCase();
-                    userToEdit.setLastName(commandPrompt);
-                }
-                case TRAINER -> {
-                    commandPrompt = userInput.nextLine().toLowerCase();
-                    Trainer trainer = (Trainer) userToEdit;
-
-                    print("""
-                            1. Rediger fornavn
-                            2. Rediger efternavn
-                            3. Senior/Junior
-                            """);
-                    //TODO lav switchcase, der passer til menuen.
-
-                    boolean seniorOrNot = (commandPrompt.equalsIgnoreCase("senior")) ? true : false;
-                    trainer.setSeniorTrainer(seniorOrNot);
-
-                }
-                default -> {
-                    print("invalid input");
-                }
-
-            }
-            db.editUserInDB(userToEdit);
-        }
-
-    }
-
     public void deleteUserFromDB(int indexInList) {
 
         ArrayList<User> allUsers = dbController.getListOfAllUsers();
@@ -244,17 +184,6 @@
         return null;
     }
 
-
-    public static int calculateAge(LocalDate dob) {
-        LocalDate curDate = LocalDate.now();
-
-        if ((dob != null) && (curDate != null)) {
-            return Period.between(dob, curDate).getYears();
-        } else {
-            return 0;
-        }
-    }
-
     private void print(String s) {
         UserInterfaceEsra.print(s);
     }
