Index: src/domain_model/Processors/SuperUserProcessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package domain_model.Processors;\n\nimport database.Database;\nimport database.DBController;\nimport domain_model.*;\nimport domain_model.userInterface.UserInterface;\nimport user_domain.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class SuperUserProcessor implements Processor {\n    private Scanner userInput;\n    DBController dbController;\n    private ArrayList<User> userListArr;\n    boolean programRunning = true;\n\n    public SuperUserProcessor(DBController dbController) {\n        this.dbController = dbController;\n        userInput = new Scanner(System.in);\n    }\n\n\n    public ArrayList createSuperUser() {\n        ArrayList<SuperUser> superUser = new ArrayList<>();\n        superUser.add(new SuperUser(1, \"flemming\", \"Rasmussen\"));\n        return superUser;\n    }\n\n    public ArrayList<String> getUserIDAndNameList() {\n        ArrayList<String> userList = new ArrayList<>();\n        ArrayList<User> allUsers = dbController.getListOfAllUsers();\n        for (User u : allUsers) {\n            UserInstance userInstance = DelfinUtil.checkUserInstance(u);\n            userList.add(u.getUserID() + \": \" + u.getFirstName() + \" \" + u.getLastName());\n        }\n        return userList;\n    }\n\n    public void CreateandAddMembertoDB(\n            String password,\n            String firstNames,\n            String lastNames,\n            boolean activePassiveInput,\n            String birthDate,\n            boolean isCompetitiveInput,\n            boolean isArrearsInput) {\n\n        Boolean isActiveMember = activePassiveInput;\n        Boolean isCompetitive = isCompetitiveInput;\n        Boolean isArrears = isArrearsInput;\n\n        User memberToAdd = new Member(dbController.getIDForNewUser(), firstNames, lastNames, isActiveMember, isCompetitive, birthDate, isArrears);\n        dbController.addUserToDB(memberToAdd, password);\n    }\n\n    public void CreateandAddTrainertoDB(\n            String password,\n            String firstNames,\n            String lastNames,\n            boolean isSeniorTrainer) {\n\n        User trainerToAdd = new Trainer(dbController.getIDForNewUser(), firstNames, lastNames, isSeniorTrainer);\n        dbController.addUserToDB(trainerToAdd, password);\n    }\n\n    public void CreateandAddCompetitiveMembertoDB(\n            String password,\n            String firstNames,\n            String lastName,\n            boolean isActiveMemberInput,\n            boolean isCompetitiveInput,\n            String birthDate,\n            boolean isArrearsInput) {\n\n        Boolean isActiveMember = isActiveMemberInput;\n        Boolean isCompetitive = isCompetitiveInput;\n        Boolean isArrears = isArrearsInput;\n\n        User competitiveMemberToAdd = new CompetitiveMember(dbController.getIDForNewUser(), firstNames, lastName, isActiveMember, isCompetitive, birthDate, isArrears);\n        dbController.addUserToDB(competitiveMemberToAdd, password);\n    }\n\n    public void CreateAndAddTreasurertoDB(String password, String firstNames, String lastNames) {\n\n        User treasurerToAdd = new Treasurer(dbController.getIDForNewUser(), firstNames, lastNames);\n        dbController.addUserToDB(treasurerToAdd, password);\n    }\n\n    public void editMember(\n            int indexOfUser,\n            String firstNameInput,\n            String lastNameInput,\n            String isActiveMemberInput,\n            String isCompetitiveInput,\n            String isArrearsInput) {\n        ArrayList<User> allUsers = dbController.getListOfAllUsers();\n\n        Member userToEdit = (Member) allUsers.get(indexOfUser);\n\n        if (firstNameInput != null) {\n            userToEdit.setFirstName(firstNameInput);\n        }\n\n        if (lastNameInput != null) {\n            userToEdit.setLastName(lastNameInput);\n        }\n\n        boolean previousCompetitive = userToEdit.isCompetitive();\n\n        boolean isCompetitive = previousCompetitive;\n        if (isCompetitiveInput != null) {\n            isCompetitive = Boolean.parseBoolean(isCompetitiveInput);\n            userToEdit.setActiveMember(Boolean.parseBoolean(isActiveMemberInput));\n        }\n\n        if (isArrearsInput != null) {\n            userToEdit.setArrears(Boolean.parseBoolean(isArrearsInput));\n        }\n\n        if (isCompetitive != previousCompetitive) {\n            User convertedMember;\n\n            if (isCompetitive) {\n                convertedMember = new CompetitiveMember(\n                        userToEdit.getUserID(),\n                        userToEdit.getFirstName(),\n                        userToEdit.getLastName(),\n                        userToEdit.isActiveMember(),\n                        true,\n                        userToEdit.getDateOfBirth(),\n                        userToEdit.isArrears());\n            } else {\n                convertedMember = new Member(\n                        userToEdit.getUserID(),\n                        userToEdit.getFirstName(),\n                        userToEdit.getLastName(),\n                        userToEdit.isActiveMember(),\n                        true,\n                        userToEdit.getDateOfBirth(),\n                        userToEdit.isArrears());\n            }\n\n            String password = dbController.getPasswordFromID(userToEdit.getUserID());\n            dbController.removeUserFromDB(userToEdit.getUserID());\n            dbController.addUserToDB(convertedMember, password);\n        } else {\n            dbController.editUserInDB(userToEdit);\n        }\n\n    }\n\n    public void editTrainer(\n            int indexOfUser,\n            String firstNameInput,\n            String lastNameInput,\n            String isSeniorTrainerInput) {\n\n        ArrayList<User> allUsers = dbController.getListOfAllUsers();\n\n        Trainer userToEdit = (Trainer) allUsers.get(indexOfUser);\n\n        if (firstNameInput != null) {\n            userToEdit.setFirstName(firstNameInput);\n        }\n        if (lastNameInput != null) {\n            userToEdit.setLastName(lastNameInput);\n        }\n        boolean isSeniorTrainer = Boolean.parseBoolean(isSeniorTrainerInput);\n        userToEdit.setSeniorTrainer(isSeniorTrainer);\n\n        dbController.editUserInDB(userToEdit);\n    }\n\n    public void editAdmin(int indexOfUser, String firstNameInput, String lastNameInput) {\n        ArrayList<User> allUsers = dbController.getListOfAllUsers();\n        User userToEdit = allUsers.get(indexOfUser);\n\n        if (firstNameInput != null) {\n            userToEdit.setFirstName(firstNameInput);\n        }\n        if (lastNameInput != null) {\n            userToEdit.setLastName(lastNameInput);\n        }\n        dbController.editUserInDB(userToEdit);\n    }\n\n\n    public void deleteUserFromDB(int indexInList) {\n\n        ArrayList<User> allUsers = dbController.getListOfAllUsers();\n        User userToDelete = allUsers.get(indexInList);\n        dbController.removeUserFromDB(userToDelete);\n\n    }\n\n    public ArrayList<String> getUserInfo(int indexToShow) {\n        ArrayList<User> allUsers = dbController.getListOfAllUsers();\n        User userForInfo = allUsers.get(indexToShow);\n        ArrayList<String> userInfo;\n        String userString = userForInfo.toString();\n        userInfo = new ArrayList<>(List.of(userString.split(\"\\n\")));\n        //userInfo.remove(0);\n\n        return userInfo;\n    }\n\n    public ArrayList<String> getUserInfoForEdit(int indexToShow) {\n        ArrayList<User> allUsers = dbController.getListOfAllUsers();\n        User userForInfo = allUsers.get(indexToShow);\n        ArrayList<String> userInfo =new ArrayList<>();\n        String firstName = \"Fornavn: \" + userForInfo.getFirstName();\n        String lastName = \"Efternavn: \" + userForInfo.getLastName();\n        userInfo.add(firstName);\n        userInfo.add(lastName);\n\n        switch (DelfinUtil.checkUserInstance(userForInfo)) {\n            case MEMBER -> {\n                String activePassive = \"Aktiv/Passiv: \" + ( ((Member) userForInfo).isActiveMember() ? \"Aktiv\" : \"Passiv\");\n                userInfo.add(activePassive);\n                String competitiveRecreational = \"Aktivitetsstatus: \" + (((Member) userForInfo).isCompetitive() ? \"Konkurrence\" : \"Motonist\");\n                userInfo.add(competitiveRecreational);\n                String arrears = \"Restance: \" + (((Member) userForInfo).isArrears() ? \"Ja\" : \"Nej\");\n                userInfo.add(arrears);\n            }\n            case TRAINER -> {\n                String SeniorTrainer = \"Tr√¶nertype: \" + (((Trainer) userForInfo).isSeniorTrainer() ? \"Senior\" : \"Junior\");\n                userInfo.add(SeniorTrainer);\n            }\n        }\n\n        return userInfo;\n    }\n\n    public UserInstance getUserType(int indexOfUser) {\n        ArrayList<User> allUsers = dbController.getListOfAllUsers();\n        User user = allUsers.get(indexOfUser);\n        return DelfinUtil.checkUserInstance(user);\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/domain_model/Processors/SuperUserProcessor.java b/src/domain_model/Processors/SuperUserProcessor.java
--- a/src/domain_model/Processors/SuperUserProcessor.java	(revision d227bfc432edefacccbbf845f378e8f4c0e87fae)
+++ b/src/domain_model/Processors/SuperUserProcessor.java	(date 1715863084984)
@@ -233,6 +233,32 @@
         return userInfo;
     }
 
+    public ArrayList<String> getUserInfoForEdit(int indexToShow) {
+        ArrayList<User> allUsers = dbController.getListOfAllUsers();
+        User userForInfo = allUsers.get(indexToShow);
+        ArrayList<String> userInfo = new ArrayList<>();
+        String firstName = "Fornavn: " + userForInfo.getFirstName();
+        String lastName = "Efternavn: " + userForInfo.getLastName();
+        userInfo.add(firstName);
+        userInfo.add(lastName);
+
+        switch (DelfinUtil.checkUserInstance(userForInfo)) {
+            case MEMBER -> {
+                String activePassive = "Aktiv/Passiv: " + (((Member) userForInfo).isActiveMember() ? "Aktiv" : "Passiv");
+                userInfo.add(activePassive);
+                String competitiveRecreational = "Aktivitetsstatus: " + (((Member) userForInfo).isCompetitive() ? "Konkurrence" : "Motonist");
+                userInfo.add(competitiveRecreational);
+                String arrears = "Restance: " + (((Member) userForInfo).isArrears() ? "Ja" : "Nej");
+                userInfo.add(arrears);
+            }
+            case TRAINER -> {
+                String SeniorTrainer = "Tr√¶nertype: " + (((Trainer) userForInfo).isSeniorTrainer() ? "Senior" : "Junior");
+                userInfo.add(SeniorTrainer);
+            }
+        }
+        return userInfo;
+    }
+
     public UserInstance getUserType(int indexOfUser) {
         ArrayList<User> allUsers = dbController.getListOfAllUsers();
         User user = allUsers.get(indexOfUser);
