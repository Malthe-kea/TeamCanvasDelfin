Index: src/domain_model/Processors/SuperUserProcessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package domain_model.Processors;\n\nimport database.Database;\nimport database.DBController;\nimport domain_model.*;\nimport database.userDB.UserDB;\nimport user_domain.*;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.time.LocalDate;\nimport java.time.Period;\n\npublic class SuperUserProcessor implements Processor {\n    private Scanner userInput;\n    DBController dbController;\n    private ArrayList<User> userListArr;\n    boolean programRunning = true;\n\n    public SuperUserProcessor(DBController dbController) {\n        this.dbController = dbController;\n        userInput = new Scanner(System.in);\n    }\n\n    @Override\n    public UIDisplayInfo getMainMenu() {\n\n\n        ArrayList<String> options = new ArrayList<>(List.of(\n                \"Tilføj medlem\",\n                \"Tilføj træner\",\n                \"Tilføj konkurrence-medlem\",\n                \"Tilføj kasserer\",\n                \"Ændre medlemsoplysninger\",\n                \"Slet medlem\",\n                \"Se brugeroversigt\"));\n\n\n        return new UIDisplayInfo(\"SuperUser Menu\",\"Vælg en af følgende muligheder\", DisplayType.MENU ,options);\n\n\n    }\n\n    @Override\n    public UIDisplayInfo processMainMenuOption(int option) {\n        return null;\n    }\n\n    public ArrayList createSuperUser() {\n        ArrayList<SuperUser> superUser = new ArrayList<>();\n        superUser.add(new SuperUser(1, \"flemming\", \"Rasmussen\"));\n        return superUser;\n    }\n\n    public ArrayList<String> getUserList() {\n        ArrayList<String> userList = new ArrayList<>();\n        ArrayList<User> allUsers = dbController.getListOfAllUsers();\n        for (User u : allUsers) {\n            UserInstance userInstance = DelfinUtil.checkUserInstance(u);\n            switch (userInstance) {\n                case MEMBER -> {\n                    userList.add(((Member)u).toString());\n                }\n                case COMPETITIVE -> {\n                    userList.add(((CompetitiveMember)u).toString());\n                }\n                case TRAINER -> {\n                    userList.add(((Trainer)u).toString());\n                }\n                case SUPER, TREASURER -> {\n                    userList.add(u.toString());\n                }\n            }\n        }\n        return userList;\n    }\n\n    public void CreateandAddMembertoDB(String password, String firstNames, String lastNames, boolean activePassiveInput, String birthDate, boolean isCompetitiveInput, boolean isArrearsInput) {\n\n        Boolean isActiveMember = activePassiveInput;\n        Boolean isCompetitive = isCompetitiveInput;\n        Boolean isArrears = isArrearsInput;\n        //LocalDate dob = LocalDate.parse(birthDate);\n\n        //TODO new member tager imod dateOfBirth som en string, det skal være LocalDate.\n        User memberToAdd = new Member(dbController.getIDForNewUser(), firstNames, lastNames, isActiveMember, isCompetitive, birthDate, isArrears);\n        dbController.addUserToDB(memberToAdd, password);\n    }\n\n    public void CreateandAddTrainertoDB(String password, String firstNames, String lastNames, boolean isSeniorTrainer) {\n\n        User trainerToAdd = new Trainer(dbController.getIDForNewUser(), firstNames, lastNames, isSeniorTrainer);\n        dbController.addUserToDB(trainerToAdd, password);\n    }\n\n    public void CreateandAddCompetitiveMembertoDB(String password, String firstNames, String lastName, boolean isActiveMemberInput, boolean isCompetitiveInput, String birthDate, boolean isArrearsInput) {\n\n        Boolean isActiveMember = isActiveMemberInput;\n        Boolean isCompetitive = isCompetitiveInput;\n        Boolean isArrears = isArrearsInput;\n        //TODO new competitiveMember tager imod dateOfBirth som en string, det skal være LocalDate.\n//        LocalDate dob = LocalDate.parse(birthDate);\n\n//Her skal laves en metode, der tager seneste userID fra DB'en og incrementer den med 1.\n        //testDB.add(new CompetitiveMember(3, \"Susse\", \"Sonnegaard\", true, true, calculateAge(dob), false));\n        User competitiveMemberToAdd = new CompetitiveMember(dbController.getIDForNewUser(), firstNames, lastName, isActiveMember, isCompetitive, birthDate, isArrears);\n        dbController.addUserToDB(competitiveMemberToAdd, password);\n    }\n\n    public void CreateAndAddTreasurertoDB(String password, String firstNames, String lastNames) {\n\n        User treasurerToAdd = new Treasurer(dbController.getIDForNewUser(), firstNames, lastNames);\n        dbController.addUserToDB(treasurerToAdd, password);\n    }\n\n    public void editMember(String userIDInput, String firstNameInput, String lastNameInput, String isActiveMemberInput, String isCompetitiveInput, String isArrearsInput) {\n        int userID = Integer.parseInt(userIDInput);\n        Member userToEdit = (Member) dbController.getUserFromID(userID);\n\n        if(!firstNameInput.isBlank()) {\n            userToEdit.setFirstName(firstNameInput);\n        }\n\n        if(!lastNameInput.isBlank()) {\n            userToEdit.setLastName(lastNameInput);\n        }\n\n        userToEdit.setActiveMember(Boolean.parseBoolean(isActiveMemberInput));\n        userToEdit.setArrears(Boolean.parseBoolean(isArrearsInput));\n\n        boolean isCompetitive = Boolean.parseBoolean(isCompetitiveInput);\n\n        if(isCompetitive != userToEdit.isCompetitive()) {\n            User convertedMember;\n\n            if(isCompetitive) {\n                convertedMember = new CompetitiveMember(userToEdit.getUserID(), userToEdit.getFirstName(), userToEdit.getLastName(), userToEdit.isActiveMember(), true, userToEdit.getDateOfBirth(),userToEdit.isArrears());\n            } else {\n                convertedMember = new Member(userToEdit.getUserID(), userToEdit.getFirstName(), userToEdit.getLastName(), userToEdit.isActiveMember(), true, userToEdit.getDateOfBirth(),userToEdit.isArrears());\n            }\n\n            String password = dbController.getPasswordFromID(userToEdit.getUserID());\n            dbController.removeUserFromDB(userID);\n            dbController.addUserToDB(convertedMember, password);\n        } else {\n            dbController.editUserInDB(userToEdit);\n        }\n\n    }\n\n    public void editTrainer() {\n    }\n\n    public void editAdmin() {\n\n    }\n\n    public void deleteUserFromDB(int indexInList) {\n\n        ArrayList<User> allUsers = dbController.getListOfAllUsers();\n        User userToDelete = allUsers.get(indexInList);\n        dbController.removeUserFromDB(userToDelete);\n\n    }\n\n    public String getUserInfo(int indexToEdit) {\n        ArrayList<User> allUsers = dbController.getListOfAllUsers();\n        User userForInfo = allUsers.get(indexToEdit);\n\n        switch (DelfinUtil.checkUserInstance(userForInfo)) {\n            case MEMBER -> {\n                return ((Member)userForInfo).toString();\n            }\n            case COMPETITIVE -> {\n                return ((CompetitiveMember)userForInfo).toString();\n            }\n            case TRAINER -> {\n                return ((Trainer)userForInfo).toString();\n            }\n            case SUPER, TREASURER -> {\n                return userForInfo.toString();\n            }\n        }\n        return \"null\";\n    }\n\n\n    public Database getUserFromDB(int idToEdit) {\n        //TODO send DB return\n        String command = \"1\";\n        print(\"\"\"\n                Hvilket brugeroversigt vil du gerne se?\n                1. Crawl\n                2. Rygcrawl\n                3. Brystsvømning\n                4. Butterfly\n                5. Aktive/Passive medlemmer\n                6. Juniorer/Seniorer\n                \"\"\");\n        while (programRunning)\n            switch (command) {\n                case \"1\" -> {\n                    print(\"Get XYZ-database\");\n                }\n                case \"2\" -> {\n                    print(\"Get XYZ-database\");\n                }\n                case \"3\" -> {\n                    print(\"Get XYZ-database\");\n                }\n                case \"4\" -> {\n                    print(\"Get XYZ-database\");\n                }\n                case \"5\" -> {\n                    print(\"Get XYZ-database\");\n                }\n                case \"6\" -> {\n                    print(\"Get XYZ-database\");\n                }\n                default -> {\n                    print(\"invalid input\");\n                }\n            }\n        return null;\n    }\n\n\n    public static int calculateAge(LocalDate dob) {\n        LocalDate curDate = LocalDate.now();\n\n        if ((dob != null) && (curDate != null)) {\n            return Period.between(dob, curDate).getYears();\n        } else {\n            return 0;\n        }\n    }\n\n    private void print(String s) {\n        System.out.println(s);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/domain_model/Processors/SuperUserProcessor.java b/src/domain_model/Processors/SuperUserProcessor.java
--- a/src/domain_model/Processors/SuperUserProcessor.java	(revision c2178a885039a1a69af9b36662da23369025a9a1)
+++ b/src/domain_model/Processors/SuperUserProcessor.java	(date 1715687388957)
@@ -38,7 +38,7 @@
                 "Se brugeroversigt"));
 
 
-        return new UIDisplayInfo("SuperUser Menu","Vælg en af følgende muligheder", DisplayType.MENU ,options);
+        return new UIDisplayInfo("SuperUser Menu", "Vælg en af følgende muligheder", DisplayType.MENU, options);
 
 
     }
@@ -61,13 +61,13 @@
             UserInstance userInstance = DelfinUtil.checkUserInstance(u);
             switch (userInstance) {
                 case MEMBER -> {
-                    userList.add(((Member)u).toString());
+                    userList.add(((Member) u).toString());
                 }
                 case COMPETITIVE -> {
-                    userList.add(((CompetitiveMember)u).toString());
+                    userList.add(((CompetitiveMember) u).toString());
                 }
                 case TRAINER -> {
-                    userList.add(((Trainer)u).toString());
+                    userList.add(((Trainer) u).toString());
                 }
                 case SUPER, TREASURER -> {
                     userList.add(u.toString());
@@ -119,11 +119,11 @@
         int userID = Integer.parseInt(userIDInput);
         Member userToEdit = (Member) dbController.getUserFromID(userID);
 
-        if(!firstNameInput.isBlank()) {
+        if (!firstNameInput.isBlank()) {
             userToEdit.setFirstName(firstNameInput);
         }
 
-        if(!lastNameInput.isBlank()) {
+        if (!lastNameInput.isBlank()) {
             userToEdit.setLastName(lastNameInput);
         }
 
@@ -132,13 +132,13 @@
 
         boolean isCompetitive = Boolean.parseBoolean(isCompetitiveInput);
 
-        if(isCompetitive != userToEdit.isCompetitive()) {
+        if (isCompetitive != userToEdit.isCompetitive()) {
             User convertedMember;
 
-            if(isCompetitive) {
-                convertedMember = new CompetitiveMember(userToEdit.getUserID(), userToEdit.getFirstName(), userToEdit.getLastName(), userToEdit.isActiveMember(), true, userToEdit.getDateOfBirth(),userToEdit.isArrears());
+            if (isCompetitive) {
+                convertedMember = new CompetitiveMember(userToEdit.getUserID(), userToEdit.getFirstName(), userToEdit.getLastName(), userToEdit.isActiveMember(), true, userToEdit.getDateOfBirth(), userToEdit.isArrears());
             } else {
-                convertedMember = new Member(userToEdit.getUserID(), userToEdit.getFirstName(), userToEdit.getLastName(), userToEdit.isActiveMember(), true, userToEdit.getDateOfBirth(),userToEdit.isArrears());
+                convertedMember = new Member(userToEdit.getUserID(), userToEdit.getFirstName(), userToEdit.getLastName(), userToEdit.isActiveMember(), true, userToEdit.getDateOfBirth(), userToEdit.isArrears());
             }
 
             String password = dbController.getPasswordFromID(userToEdit.getUserID());
@@ -150,8 +150,36 @@
 
     }
 
-    public void editTrainer() {
+    public void editTrainer(String userIDInput, String firstNameInput, String lastNameInput, String isSeniorTrainerInput) {
+        int userID = Integer.parseInt(userIDInput);
+        Member userToEdit = (Member) dbController.getUserFromID(userID);
+
+        if (!firstNameInput.isBlank()) {
+            userToEdit.setFirstName(firstNameInput);
+        }
+        if (!lastNameInput.isBlank()) {
+            userToEdit.setLastName(lastNameInput);
+        }
+        boolean isSenior = Boolean.parseBoolean(isSeniorTrainerInput);
+        userToEdit.setSenior(isSenior);
+
+        dbController.editUserInDB(userToEdit);
     }
+    public void editTreassurer(String userIDInput, String firstNameInput, String lastNameInput) {
+        int userID = Integer.parseInt(userIDInput);
+        Member userToEdit = (Member) dbController.getUserFromID(userID);
+
+        if (!firstNameInput.isBlank()) {
+            userToEdit.setFirstName(firstNameInput);
+        }
+        if (!lastNameInput.isBlank()) {
+            userToEdit.setLastName(lastNameInput);
+        }
+        dbController.editUserInDB(userToEdit);
+    }
+
+
+
 
     public void editAdmin() {
 
@@ -171,13 +199,13 @@
 
         switch (DelfinUtil.checkUserInstance(userForInfo)) {
             case MEMBER -> {
-                return ((Member)userForInfo).toString();
+                return ((Member) userForInfo).toString();
             }
             case COMPETITIVE -> {
-                return ((CompetitiveMember)userForInfo).toString();
+                return ((CompetitiveMember) userForInfo).toString();
             }
             case TRAINER -> {
-                return ((Trainer)userForInfo).toString();
+                return ((Trainer) userForInfo).toString();
             }
             case SUPER, TREASURER -> {
                 return userForInfo.toString();
@@ -226,17 +254,6 @@
         return null;
     }
 
-
-    public static int calculateAge(LocalDate dob) {
-        LocalDate curDate = LocalDate.now();
-
-        if ((dob != null) && (curDate != null)) {
-            return Period.between(dob, curDate).getYears();
-        } else {
-            return 0;
-        }
-    }
-
     private void print(String s) {
         System.out.println(s);
     }
Index: src/domain_model/Controller.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package domain_model;\n\nimport database.DBController;\nimport domain_model.Processors.*;\nimport user_domain.User;\n\nimport java.util.ArrayList;\n\npublic class Controller implements Processor {\n\n    private final DBController DBCONTROLLER;\n\n    private Processor processor;\n    private UserInstance userInstance;\n\n    public Controller() {\n        DBCONTROLLER = new DBController();\n\n    }\n\n    public UIDisplayInfo getMainMenu() {\n        return processor.getMainMenu();\n    }\n\n    public UserInstance getUserFromPassword(String password) {\n        User userLoggingIn = DBCONTROLLER.getUserFromPassword(password);\n        userInstance = DelfinUtil.checkUserInstance(userLoggingIn);\n\n        switch (userInstance) {\n            case MEMBER, COMPETITIVE -> {\n                processor = new MemberProcessor(DBCONTROLLER);\n            }\n            case TRAINER -> {\n                processor = new TrainerProcessor(DBCONTROLLER);\n            }\n            case SUPER -> {\n                processor = new SuperUserProcessor(DBCONTROLLER);\n            }\n            case TREASURER -> {\n                processor = new TreasurerProcessor(DBCONTROLLER);\n            }\n        }\n\n        return userInstance;\n    }\n\n\n    public void createandAddMembertoDB(String password, String firstNames, String lastNames, boolean activePassiveInput, String birthDate, boolean isCompetitiveInput, boolean isArrearsInput) {\n        SuperUserProcessor superUserProcessor = (SuperUserProcessor) processor;\n\n        superUserProcessor.CreateandAddMembertoDB(password, firstNames, lastNames, activePassiveInput, birthDate, isCompetitiveInput, isArrearsInput);\n    }\n\n    public void createandAddTrainerToDB(String password, String firstNames, String lastNames, boolean isSeniorTrainer) {\n        SuperUserProcessor superUserProcessor = (SuperUserProcessor) processor;\n\n        superUserProcessor.CreateandAddTrainertoDB(password, firstNames, lastNames, isSeniorTrainer);\n    }\n\n    public void createandAddCompetitiveMembertoDB(String password, String firstNames, String lastNames, boolean isActiveMemberInput, String birthDate, boolean isCompetitiveInput, boolean isArrearsInput) {\n        SuperUserProcessor superUserProcessor = (SuperUserProcessor) processor;\n        superUserProcessor.CreateandAddCompetitiveMembertoDB(password, firstNames, lastNames, isActiveMemberInput, isCompetitiveInput, birthDate, isArrearsInput);\n    }\n\n    public void createandAddTreasurertoDB(String password, String firstNames, String lastNames) {\n        SuperUserProcessor superUserProcessor = (SuperUserProcessor) processor;\n\n        superUserProcessor.CreateAndAddTreasurertoDB(password, firstNames, lastNames);\n    }\n\n    public void editMember(\n            String userIDInput,\n            String firstNameInput,\n            String lastNameInput,\n            String isActiveMemberInput,\n            String isCompetitiveInput,\n            String isArrearsInput)\n    {\n        SuperUserProcessor superUserProcessor = (SuperUserProcessor) processor;\n\n        superUserProcessor.editMember(userIDInput, firstNameInput, lastNameInput, isActiveMemberInput, isCompetitiveInput, isArrearsInput);\n    }\n\n    public void editTrainer() {\n        SuperUserProcessor superUserProcessor = (SuperUserProcessor) processor;\n\n        superUserProcessor.editTrainer();\n    }\n\n    public void editAdmin() {\n        SuperUserProcessor superUserProcessor = (SuperUserProcessor) processor;\n\n        superUserProcessor.editAdmin();\n    }\n\n    public void deleteUserFromDB(int indexInList) {\n        SuperUserProcessor superUserProcessor = (SuperUserProcessor) processor;\n\n        superUserProcessor.deleteUserFromDB(indexInList);\n    }\n\n    public ArrayList<String> getUserList() {\n        SuperUserProcessor superUserProcessor = (SuperUserProcessor) processor;\n\n        return superUserProcessor.getUserList();\n    }\n\n    public String getUserInfo(int indexOfList) {\n        SuperUserProcessor superUserProcessor = (SuperUserProcessor) processor;\n\n        return superUserProcessor.getUserInfo(indexOfList);\n    }\n\n\n    @Override\n    public UIDisplayInfo processMainMenuOption(int option) {\n        return processor.processMainMenuOption(option);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/domain_model/Controller.java b/src/domain_model/Controller.java
--- a/src/domain_model/Controller.java	(revision c2178a885039a1a69af9b36662da23369025a9a1)
+++ b/src/domain_model/Controller.java	(date 1715687388966)
@@ -81,10 +81,10 @@
         superUserProcessor.editMember(userIDInput, firstNameInput, lastNameInput, isActiveMemberInput, isCompetitiveInput, isArrearsInput);
     }
 
-    public void editTrainer() {
+    public void editTrainer(String userIDInput, String firstNameInput, String lastNameInput, String isSeniorTrainerInput) {
         SuperUserProcessor superUserProcessor = (SuperUserProcessor) processor;
 
-        superUserProcessor.editTrainer();
+        superUserProcessor.editTrainer(userIDInput,firstNameInput,lastNameInput,isSeniorTrainerInput);
     }
 
     public void editAdmin() {
Index: src/domain_model/Processors/MemberProcessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package domain_model.Processors;\n\nimport database.DBController;\nimport domain_model.UIDisplayInfo;\nimport user_domain.Member;\n\npublic class MemberProcessor implements Processor {\n    private DBController dbController;\n    private Member member;\n\n    public MemberProcessor(DBController dbController) {\n        this.dbController = dbController;\n    }\n\n//    public void MemberInfoMenu(String command) {\n//        System.out.println(\"Menu options: \");\n//        switch (command) {\n//            case \"1\" -> {\n//                displayMemberOverview();\n//            }\n//            case \"2\" -> {\n//                displayTrainingResultsForEachDiscipline();\n//            }\n//            case \"3\" -> {\n//                displayCompetitionResults();\n//            }\n//\n//        }\n//    }\n\n    public void displayMemberOverview() {\n        System.out.println(\"Member profile:\");\n        System.out.println(\"Is active/passive: \" + member.isActiveMember());\n        System.out.println(\"Is a competitive member: \" + member.isCompetitive());\n        System.out.println(\"Restance: \" + member.isArrears());\n        System.out.println(\"Yearly membership fee: \" + member.getYearlyMembershipFee());\n    }\n\n    @Override\n    public UIDisplayInfo getMainMenu() {\n        return null;\n    }\n\n    @Override\n    public UIDisplayInfo processMainMenuOption(int option) {\n        return null;\n    }\n\n    // Metode til at vise tr?ningsresultat og dato for hver disciplin\n    public void displayTrainingResultsForEachDiscipline() {\n        System.out.println(\"Results: \");\n\n    }\n\n    // Metode til at vise alle registrerede konkurrenceresultater\n    public void displayCompetitionResults() {\n        if (member.isCompetitive()) {\n        //return CompetitiveMember.getCompetitionDB();\n        //return UserDB.getPR(); //eller noget til at f? pr for hver disciplin\n\n        }\n\n    }\n\n    }\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/domain_model/Processors/MemberProcessor.java b/src/domain_model/Processors/MemberProcessor.java
--- a/src/domain_model/Processors/MemberProcessor.java	(revision c2178a885039a1a69af9b36662da23369025a9a1)
+++ b/src/domain_model/Processors/MemberProcessor.java	(date 1715677441611)
@@ -1,6 +1,7 @@
 package domain_model.Processors;
 
 import database.DBController;
+import database.userDB.UserDB;
 import domain_model.UIDisplayInfo;
 import user_domain.Member;
 
@@ -12,30 +13,6 @@
         this.dbController = dbController;
     }
 
-//    public void MemberInfoMenu(String command) {
-//        System.out.println("Menu options: ");
-//        switch (command) {
-//            case "1" -> {
-//                displayMemberOverview();
-//            }
-//            case "2" -> {
-//                displayTrainingResultsForEachDiscipline();
-//            }
-//            case "3" -> {
-//                displayCompetitionResults();
-//            }
-//
-//        }
-//    }
-
-    public void displayMemberOverview() {
-        System.out.println("Member profile:");
-        System.out.println("Is active/passive: " + member.isActiveMember());
-        System.out.println("Is a competitive member: " + member.isCompetitive());
-        System.out.println("Restance: " + member.isArrears());
-        System.out.println("Yearly membership fee: " + member.getYearlyMembershipFee());
-    }
-
     @Override
     public UIDisplayInfo getMainMenu() {
         return null;
@@ -53,14 +30,9 @@
     }
 
     // Metode til at vise alle registrerede konkurrenceresultater
-    public void displayCompetitionResults() {
+    public void displayCompetitionResults(int userID) {
         if (member.isCompetitive()) {
-        //return CompetitiveMember.getCompetitionDB();
-        //return UserDB.getPR(); //eller noget til at f? pr for hver disciplin
-
+            dbController.getListOfCompetitions(userID);
         }
-
     }
-
-    }
-
+}
